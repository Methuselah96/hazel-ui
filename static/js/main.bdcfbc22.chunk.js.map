{"version":3,"sources":["foundation/Color.ts","foundation/GlobalStyles.ts","foundation/MediaQuery/breakpoints.ts","foundation/MediaQuery/MediaQuery.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Color","breakpoints","GlobalStyles","createGlobalStyle","normalize","createMediaQuery","type","width","mobile","tablet","desktop","desktopLarge","App","SubHeading","styled","h2","getRoyal","latin","getSerifMedium","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAAYA,E,0CAAAA,K,gBAAAA,E,oBAAAA,E,mBAAAA,E,sBAAAA,E,wBAAAA,M,w6BCGL,ICKKC,EDLCC,EAAeC,4BAAH,IACrBC,aEAJ,SAASC,EAAiBC,EAAsBC,GAC9C,MAAM,WAAN,OAAkBD,EAAlB,oBAAkCC,EAAlC,O,SDGUN,O,qBAAAA,I,qBAAAA,I,wBAAAA,I,mCAAAA,M,KCEAI,EAAiB,MAAOJ,EAAYO,QACpCH,EAAiB,MAAOJ,EAAYQ,QACnCJ,EAAiB,MAAOJ,EAAYS,SAC/BL,EAAiB,MAAOJ,EAAYU,cAGrCN,EAAiB,MAAOJ,EAAYO,OAAS,GAC7CH,EAAiB,MAAOJ,EAAYQ,OAAS,GAClDJ,EAAiB,MAAOJ,EAAYS,QAAU,GAC7CL,EAAiB,MAAOJ,EAAYU,aAAe,G,MAXzD,I,+GCFA,SAASC,IACd,OACE,oCACE,gCACE,2DACA,kBAACC,EAAD,gEAQR,IAAMA,EAAaC,UAAOC,GAAV,IACZC,YAASC,KACTC,YAAe,SCTCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACxB,EAAD,MACA,kBAACU,EAAD,OAEFe,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdcfbc22.chunk.js","sourcesContent":["export enum Color {\n  // browser supported\n  azure = \"#F0FFFF\",\n  lightCyan = \"#E0FFFF\",\n  honeyDew = \"#F0FFF0\",\n  floralWhite = \"#FFFAF0\",\n  midnightBlue = \"#191970\",\n  // custom\n}\n","import { createGlobalStyle } from \"styled-components\";\nimport { normalize } from \"styled-normalize\";\n\nexport const GlobalStyles = createGlobalStyle`\n  ${normalize}\n\n  /* Box Sizing https://bit.ly/1A91I0J */\n  html {\n    box-sizing: border-box;\n    font-size: 100%;\n  }\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n\n  @font-face {\n    font-display: optional;\n    font-family: 'ReithSans';\n    font-style: normal;\n    font-weight: 400;\n    src: url('https://gel.files.bbci.co.uk/r2.511/BBCReithSans_W_Rg.woff2')\n        format('woff2'), url('https://gel.files.bbci.co.uk/r2.511/BBCReithSans_W_Rg.woff')\n        format('woff');\n  }\n  \n @font-face {\n    font-display: optional;\n    font-family: 'ReithSerif';\n    font-style: normal;\n    font-weight: 600;\n    src: url('https://gel.files.bbci.co.uk/r2.511/BBCReithSerif_W_Md.woff2')\n        format('woff2'), url('https://gel.files.bbci.co.uk/r2.511/BBCReithSerif_W_Md.woff')\n        format('woff');\n  }\n`;\n","/**\n * Mobile Small = equal to or below 374px\n * Mobile = 375px to 767px\n * Tablet = 768px to 1023px\n * Desktop = 1024px to 1919px\n * Desktop Large = equal to or above 1920px\n */\n\nexport enum breakpoints {\n  // mobileSmall = 320,\n  mobile = 375,\n  tablet = 768,\n  desktop = 1024,\n  desktopLarge = 1920,\n}\n","import { breakpoints } from \"./breakpoints\";\n\ntype MediaQueryType = \"min\" | \"max\";\n\nfunction createMediaQuery(type: MediaQueryType, width: number) {\n  return `@media (${type}-width): ${width}px`;\n}\n\nexport const MediaQuery = {\n  minWidth: {\n    mobile: createMediaQuery(\"min\", breakpoints.mobile),\n    tablet: createMediaQuery(\"min\", breakpoints.tablet),\n    desktop: createMediaQuery(\"min\", breakpoints.desktop),\n    desktopLarge: createMediaQuery(\"min\", breakpoints.desktopLarge),\n  },\n  maxWidth: {\n    mobileSmall: createMediaQuery(\"max\", breakpoints.mobile - 1),\n    mobileLarge: createMediaQuery(\"max\", breakpoints.tablet - 1),\n    tablet: createMediaQuery(\"max\", breakpoints.desktop - 1),\n    desktop: createMediaQuery(\"max\", breakpoints.desktopLarge - 1),\n  },\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { latin } from \"@bbc/gel-foundations/scripts\";\nimport { getRoyal } from \"@bbc/gel-foundations/typography\";\nimport { getSerifMedium } from \"@bbc/psammead-styles/font-styles\";\n\nexport function App() {\n  return (\n    <>\n      <header>\n        <p>Custom React table component</p>\n        <SubHeading>\n          Could a computer ever create better art than a human?\n        </SubHeading>\n      </header>\n    </>\n  );\n}\n\nconst SubHeading = styled.h2`\n  ${getRoyal(latin)};\n  ${getSerifMedium(\"news\")};\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { GlobalStyles } from \"./foundation\";\n\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}