{"version":3,"sources":["Table/Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Table","props","data","React","useMemo","columns","useTable","useSortBy","useExpanded","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","TableContainer","map","headerGroup","getHeaderGroupProps","headers","column","Th","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","Td","getCellProps","styled","table","th","td","App","tableData","tableColumns","col1","col2","subRows","Header","accessor","Cell","canExpand","getToggleRowExpandedProps","style","isExpanded","value","paddingLeft","depth","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kqBASO,SAASA,EAAMC,GAQpB,IAAMC,EAAOC,IAAMC,SAAQ,kBAAMH,EAAMC,OAAM,CAACD,EAAMC,OAC9CG,EAAUF,IAAMC,SAAQ,kBAAMH,EAAMI,UAAS,CAACJ,EAAMI,UATnB,EAiBnCC,mBAAS,CAAED,UAASH,QAAQK,YAAWC,eALzCC,EAZqC,EAYrCA,cACAC,EAbqC,EAarCA,kBACAC,EAdqC,EAcrCA,aACAC,EAfqC,EAerCA,KACAC,EAhBqC,EAgBrCA,WAGF,OAEE,kBAACC,EAAmBL,IAClB,+BAGIE,EAAaI,KAAI,SAACC,GAAD,OAEf,uBAAQA,EAAYC,sBAGhBD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OAEtB,kBAACC,EAAOD,EAAOE,eAAeF,EAAOG,wBAGjCH,EAAOI,OAAO,UAGhB,8BACGJ,EAAOK,SACJL,EAAOM,aACL,gBACA,gBACF,aAWpB,0BAAWf,IAGPE,EAAKG,KAAI,SAACW,GAGR,OADAb,EAAWa,GAGT,uBAAQA,EAAIC,cAGRD,EAAIE,MAAMb,KAAI,SAACc,GAEb,OACE,kBAACC,EAAOD,EAAKE,eAGTF,EAAKN,OAAO,kBAetC,IAAMT,EAAiBkB,IAAOC,MAAV,KAIdb,EAAKY,IAAOE,GAAV,KAOFJ,EAAKE,IAAOG,GAAV,KCtGD,SAASC,IACd,OACE,oCACE,gCACE,2DACA,kBAACpC,EAAD,CAAOE,KAAMmC,EAAWhC,QAASiC,MAMzC,IAAMD,EAAY,CAChB,CACEE,KAAM,QACNC,KAAM,GACNC,QAAS,CACP,CACEF,KAAM,MACNC,KAAM,GAER,CACED,KAAM,MACNC,KAAM,KAIZ,CACED,KAAM,cACNC,KAAM,GACNC,QAAS,CACP,CACEF,KAAM,MACNC,KAAM,GAER,CACED,KAAM,MACNC,KAAM,KAIZ,CACED,KAAM,WACNC,KAAM,MAIJF,EAAe,CACnB,CACEI,OAAQ,WACRC,SAAU,OACVC,KAAM,SAAC3C,GAAD,OAIJA,EAAMyB,IAAImB,UACR,yBACM5C,EAAMyB,IAAIoB,0BAA0B,CACtCC,MAAO,KAGR9C,EAAMyB,IAAIsB,WAAa,eAAO,eALjC,QAK8C/C,EAAMgD,OAGpD,0BACEF,MAAO,CAILG,YAAY,GAAD,OAAuB,EAAlBjD,EAAMyB,IAAIyB,MAAf,SAGZlD,EAAMgD,SAIf,CACEP,OAAQ,WACRC,SAAU,SCrEMS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlC,OACP,kBAAC,IAAMmC,WAAP,KACE,kBAACtB,EAAD,OAEFuB,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83e04231.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, Column, useSortBy, useExpanded } from \"react-table\";\n\ntype TableProps = {\n  data: Array<any>;\n  columns: Array<Column>;\n};\n\nexport function Table(props: TableProps) {\n  /* It's important that we're using React.useMemo here to ensure\n   * that our data isn't recreated on every render. If we didn't use\n   * React.useMemo, the table would think it was receiving new data on\n   * every render and attempt to recalulate a lot of logic every single\n   * time. Not cool!\n   */\n\n  const data = React.useMemo(() => props.data, [props.data]);\n  const columns = React.useMemo(() => props.columns, [props.columns]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data }, useSortBy, useExpanded);\n\n  return (\n    // apply the table props\n    <TableContainer {...getTableProps()}>\n      <thead>\n        {\n          // Loop over the header rows\n          headerGroups.map((headerGroup: any) => (\n            // Apply the header row props\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {\n                // Loop over the headers in each row\n                headerGroup.headers.map((column: any) => (\n                  // Apply the header cell props\n                  <Th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {\n                      // Render the header\n                      column.render(\"Header\")\n                    }\n                    {/* Add a sort direction indicator */}\n                    <span>\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" ðŸ”½\"\n                          : \" ðŸ”¼\"\n                        : \"\"}\n                    </span>\n                  </Th>\n                ))\n              }\n            </tr>\n          ))\n        }\n      </thead>\n\n      {/* Apply the table body props */}\n      <tbody {...getTableBodyProps()}>\n        {\n          // Loop over the table rows\n          rows.map((row: any) => {\n            // Prepare the row for display\n            prepareRow(row);\n            return (\n              // Apply the row props\n              <tr {...row.getRowProps()}>\n                {\n                  // Loop over the rows cells\n                  row.cells.map((cell: any) => {\n                    // Apply the cell props\n                    return (\n                      <Td {...cell.getCellProps()}>\n                        {\n                          // Render the cell contents\n                          cell.render(\"Cell\")\n                        }\n                      </Td>\n                    );\n                  })\n                }\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </TableContainer>\n  );\n}\n\nconst TableContainer = styled.table`\n  border: 1px solid olive;\n`;\n\nconst Th = styled.th`\n  border-bottom: 3px solid maroon;\n  background: aliceblue;\n  color: black;\n  font-weight: bold;\n`;\n\nconst Td = styled.td`\n  padding: 10px;\n  border: 1px solid DarkBlue;\n  background: PapayaWhip;\n`;\n","import React from \"react\";\n\nimport { Table } from \"./Table\";\n\nexport function App() {\n  return (\n    <>\n      <header>\n        <p>Custom React table component</p>\n        <Table data={tableData} columns={tableColumns} />\n      </header>\n    </>\n  );\n}\n\nconst tableData = [\n  {\n    col1: \"Hello\",\n    col2: 30,\n    subRows: [\n      {\n        col1: \"Jan\",\n        col2: 5,\n      },\n      {\n        col1: \"Feb\",\n        col2: 6,\n      },\n    ],\n  },\n  {\n    col1: \"react-table\",\n    col2: 20,\n    subRows: [\n      {\n        col1: \"Jan\",\n        col2: 5,\n      },\n      {\n        col1: \"Feb\",\n        col2: 6,\n      },\n    ],\n  },\n  {\n    col1: \"whatever\",\n    col2: 100,\n  },\n];\n\nconst tableColumns = [\n  {\n    Header: \"Column 1\",\n    accessor: \"col1\", // accessor is the \"key\" in the data\n    Cell: (props: any) =>\n      /* Use the row.canExpand and row.getToggleRowExpandedProps\n       * prop getter to build the toggle for expanding a row\n       */\n      props.row.canExpand ? (\n        <span\n          {...props.row.getToggleRowExpandedProps({\n            style: {},\n          })}\n        >\n          {props.row.isExpanded ? \"ðŸ‘‡\" : \"ðŸ‘‰\"} &nbsp;{props.value}\n        </span>\n      ) : (\n        <span\n          style={{\n            // We can use the row.depth property\n            // and paddingLeft to indicate the depth\n            // of the row\n            paddingLeft: `${props.row.depth * 2}rem`,\n          }}\n        >\n          {props.value}\n        </span>\n      ),\n  },\n  {\n    Header: \"Column 2\",\n    accessor: \"col2\",\n  },\n];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}